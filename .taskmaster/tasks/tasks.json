{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Fix existing types and create new entity types",
        "description": "Update existing incorrect type definitions and create missing entity types for Incident, Case, and BOL based on business logic requirements",
        "status": "done",
        "priority": "high",
        "dependencies": [],
        "details": "EXISTING CODE FIXES NEEDED:\n1. Fix ActivityType enum in lib/utils/security.ts - change from TAILGATE, ARMED_PERSON to medical, security-breach, alert, patrol, evidence, property-damage, bol-event\n2. Fix Status enum in lib/utils/status.ts - change from 'new', 'active', 'investigating' to 'detecting', 'assigned', 'responding', 'resolved'\n3. Update Activity interface in lib/types/activity.ts to include all required fields from business logic\n\nNEW FILES TO CREATE:\n4. Create lib/types/incident.ts for Incident entity\n5. Create lib/types/case.ts for Case entity\n6. Create lib/types/bol.ts for BOL entity\n7. Create lib/types/audit.ts for audit trail types\n8. Create lib/types/common.ts for shared types (User, Role, etc.)",
        "testStrategy": "Validate all type definitions compile without errors, ensure enums match business logic exactly, verify all required fields are present in interfaces"
      },
      {
        "id": 2,
        "title": "Implement state management with Zustand",
        "description": "Install Zustand and create stores for all entities since NO state management currently exists (only React useState)",
        "status": "done",
        "priority": "high",
        "dependencies": [
          1
        ],
        "details": "CURRENT STATE: No centralized state management, all components use React useState\n\nIMPLEMENTATION:\n1. Install zustand and zustand/middleware packages\n2. Create stores/ directory structure\n3. Implement stores/activityStore.ts with CRUD operations\n4. Implement stores/incidentStore.ts with auto-creation logic\n5. Implement stores/caseStore.ts with investigation workflow\n6. Implement stores/bolStore.ts with pattern matching\n7. Implement stores/auditStore.ts for audit trail\n8. Create stores/persist.ts for localStorage persistence middleware\n9. Add store providers to App.tsx",
        "testStrategy": "Test store operations work correctly, verify localStorage persistence across sessions, ensure stores sync properly, test computed values update correctly"
      },
      {
        "id": 3,
        "title": "Build service layer architecture",
        "description": "Create service layer since NO services exist - components directly import mock data",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          2
        ],
        "details": "CURRENT STATE: Components directly import from enterpriseMockData.tsx with no abstraction\n\nIMPLEMENTATION:\n1. Create services/ directory\n2. Build services/base.service.ts with repository pattern\n3. Create services/activity.service.ts with business rules\n4. Create services/incident.service.ts with auto-creation logic\n5. Create services/case.service.ts with evidence management\n6. Create services/bol.service.ts with confidence scoring\n7. Create services/audit.service.ts with universal logging\n8. Update components to use services instead of direct imports",
        "testStrategy": "Mock service responses, test business rule enforcement, verify service layer abstraction works, ensure future database integration path is clear"
      },
      {
        "id": 4,
        "title": "Implement audit system foundation",
        "description": "Build audit infrastructure early since ALL operations must be audited per business logic",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          3
        ],
        "details": "1. Implement audit service with WHO, WHAT, WHEN, WHERE, WHY capture\n2. Create audit decorators/hooks for automatic logging\n3. Add before/after state tracking for all changes\n4. Build audit event types for each entity operation\n5. Implement audit storage in localStorage with rotation\n6. Add audit trail to all service methods\n7. Create audit context providers\n8. Build compliance report generators",
        "testStrategy": "Verify every operation creates audit entry, test audit data completeness, validate before/after states captured, ensure no operations bypass audit"
      },
      {
        "id": 5,
        "title": "Migrate Activity system to business logic compliance",
        "description": "Update existing Activity implementation to match business logic requirements - significant changes needed",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          4
        ],
        "details": "MIGRATION TASKS:\n1. Update all components using old ActivityType values (TAILGATE → medical, etc.)\n2. Update all components using old Status values ('new' → 'detecting', etc.)\n3. Implement auto-tagging system with system tags and user tags\n4. Add multi-incident support to activities (activity.incident_contexts)\n5. Implement activity status progression with role checks\n6. Add 30-day retention logic with archiving\n7. Update mock data generators to use new types\n8. Create migration guide for other developers",
        "testStrategy": "Test all activity operations with new types, verify auto-tagging works correctly, test multi-incident contexts, validate role-based permissions"
      },
      {
        "id": 6,
        "title": "Build Incident Management system",
        "description": "Create complete incident system from scratch - no incident functionality currently exists",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          5
        ],
        "details": "1. Implement incident service with creation logic\n2. Build auto-incident rules based on activity types (medical=ALWAYS, etc.)\n3. Create pending incident validation (5 min initial, 15 min escalation)\n4. Implement multi-location incident support\n5. Build incident status workflow\n6. Create guard assignment process (NO automatic dispatch)\n7. Add incident-activity relationship management\n8. Generate incident mock data",
        "testStrategy": "Test each activity type triggers correct incident behavior, verify pending validation timers, test multi-location permissions, ensure no auto-dispatch"
      },
      {
        "id": 7,
        "title": "Build Case Investigation system",
        "description": "Create case management from scratch with evidence handling and multi-site support",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          6
        ],
        "details": "1. Create case service with investigation workflow\n2. Support case creation from incidents OR direct from activities\n3. Build evidence management with chain of custody\n4. Implement team assignment (lead, investigator, reviewer)\n5. Create case lifecycle states\n6. Add multi-site coordination\n7. Enable any-priority activity linking\n8. Generate case mock data",
        "testStrategy": "Test case creation paths, verify evidence chain of custody, test team permissions, validate multi-site access"
      },
      {
        "id": 8,
        "title": "Build BOL system",
        "description": "Create Be-On-Lookout system with pattern matching and multi-site distribution",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          6
        ],
        "details": "1. Create BOL service and types\n2. Implement BOL creation → automatic activity generation\n3. Build confidence scoring (70%, 85%, 95% thresholds)\n4. Create pattern matching for BOL alerts\n5. Implement multi-site BOL distribution\n6. Build BOL resolution workflow\n7. Add real-time monitoring simulation\n8. Generate BOL mock data",
        "testStrategy": "Test BOL creates activities correctly, verify confidence calculations, test pattern matching accuracy, validate multi-site distribution"
      },
      {
        "id": 9,
        "title": "Update UI components for all entities",
        "description": "Migrate existing components and create new UI for Incidents, Cases, and BOL",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          6,
          7,
          8
        ],
        "details": "MIGRATIONS NEEDED:\n1. Update Timeline.tsx to show incidents and cases\n2. Update CommandCenter to use new stores/services\n3. Fix all ActivityCard components for new types\n\nNEW COMPONENTS:\n4. Create IncidentPanel with pending validation UI\n5. Build CaseInvestigation interface\n6. Design BOLManagement screen\n7. Add AuditTrailViewer component\n8. Update all imports and props",
        "testStrategy": "Test all components render with new data structures, verify migrations work, test new components with mock data, ensure responsive design"
      },
      {
        "id": 10,
        "title": "Testing, documentation, and deployment prep",
        "description": "Comprehensive testing and documentation for the migrated system",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          9
        ],
        "details": "1. Write migration guide for existing code changes\n2. Create unit tests for all new services\n3. Build integration tests for workflows\n4. Document API changes for future developers\n5. Create demo scenarios showing all features\n6. Test performance with large datasets\n7. Verify Vercel deployment works\n8. Create rollback plan if needed",
        "testStrategy": "Achieve test coverage goals, ensure all documentation is accurate, verify deployment succeeds, test rollback procedures"
      }
    ],
    "metadata": {
      "created": "2025-07-29T23:04:44.311Z",
      "updated": "2025-07-29T23:37:05.795Z",
      "description": "Tasks for master context"
    }
  }
}